// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VolApp.Data;

#nullable disable

namespace VolApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250325091042_seedVol")]
    partial class seedVol
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VolApp.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VolId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("VolApp.Models.Vol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateArrivee")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDepart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Depart")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NombrePlacesMax")
                        .HasColumnType("int");

                    b.Property<int>("PlacesDisponibles")
                        .HasColumnType("int");

                    b.Property<decimal>("Prix")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Vols");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateArrivee = new DateTime(2023, 10, 15, 23, 45, 0, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2023, 10, 15, 14, 30, 0, 0, DateTimeKind.Utc),
                            Depart = "New York",
                            Destination = "Paris",
                            NombrePlacesMax = 200,
                            PlacesDisponibles = 150,
                            Prix = 500.00m
                        },
                        new
                        {
                            Id = 2,
                            DateArrivee = new DateTime(2023, 11, 2, 8, 0, 0, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2023, 11, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Depart = "Los Angeles",
                            Destination = "Tokyo",
                            NombrePlacesMax = 300,
                            PlacesDisponibles = 250,
                            Prix = 800.00m
                        },
                        new
                        {
                            Id = 3,
                            DateArrivee = new DateTime(2023, 10, 21, 7, 30, 0, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2023, 10, 20, 18, 15, 0, 0, DateTimeKind.Utc),
                            Depart = "Chicago",
                            Destination = "London",
                            NombrePlacesMax = 250,
                            PlacesDisponibles = 180,
                            Prix = 650.00m
                        },
                        new
                        {
                            Id = 4,
                            DateArrivee = new DateTime(2023, 11, 6, 19, 30, 0, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2023, 11, 5, 22, 0, 0, 0, DateTimeKind.Utc),
                            Depart = "New York",
                            Destination = "Dubai",
                            NombrePlacesMax = 350,
                            PlacesDisponibles = 300,
                            Prix = 950.00m
                        },
                        new
                        {
                            Id = 5,
                            DateArrivee = new DateTime(2023, 10, 27, 6, 15, 0, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2023, 10, 25, 23, 45, 0, 0, DateTimeKind.Utc),
                            Depart = "Los Angeles",
                            Destination = "Sydney",
                            NombrePlacesMax = 280,
                            PlacesDisponibles = 220,
                            Prix = 1200.00m
                        },
                        new
                        {
                            Id = 6,
                            DateArrivee = new DateTime(2023, 11, 11, 18, 40, 0, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2023, 11, 10, 13, 20, 0, 0, DateTimeKind.Utc),
                            Depart = "San Francisco",
                            Destination = "Singapore",
                            NombrePlacesMax = 320,
                            PlacesDisponibles = 270,
                            Prix = 1100.00m
                        },
                        new
                        {
                            Id = 7,
                            DateArrivee = new DateTime(2023, 10, 31, 19, 25, 0, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2023, 10, 30, 15, 10, 0, 0, DateTimeKind.Utc),
                            Depart = "Vancouver",
                            Destination = "Hong Kong",
                            NombrePlacesMax = 290,
                            PlacesDisponibles = 240,
                            Prix = 1050.00m
                        },
                        new
                        {
                            Id = 8,
                            DateArrivee = new DateTime(2023, 11, 15, 23, 45, 0, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2023, 11, 15, 9, 30, 0, 0, DateTimeKind.Utc),
                            Depart = "Miami",
                            Destination = "Berlin",
                            NombrePlacesMax = 230,
                            PlacesDisponibles = 190,
                            Prix = 700.00m
                        },
                        new
                        {
                            Id = 9,
                            DateArrivee = new DateTime(2025, 7, 1, 8, 0, 11, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2025, 7, 1, 11, 33, 1, 0, DateTimeKind.Utc),
                            Depart = "Los Angeles",
                            Destination = "Hong Kong",
                            NombrePlacesMax = 360,
                            PlacesDisponibles = 314,
                            Prix = 82.00m
                        },
                        new
                        {
                            Id = 10,
                            DateArrivee = new DateTime(2025, 5, 21, 14, 40, 11, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2025, 5, 22, 3, 16, 10, 0, DateTimeKind.Utc),
                            Depart = "Vancouver",
                            Destination = "Dubai",
                            NombrePlacesMax = 330,
                            PlacesDisponibles = 275,
                            Prix = 487.00m
                        },
                        new
                        {
                            Id = 11,
                            DateArrivee = new DateTime(2025, 8, 4, 5, 40, 11, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2025, 8, 4, 16, 37, 30, 0, DateTimeKind.Utc),
                            Depart = "Sydney",
                            Destination = "Shanghai",
                            NombrePlacesMax = 390,
                            PlacesDisponibles = 376,
                            Prix = 340.00m
                        },
                        new
                        {
                            Id = 12,
                            DateArrivee = new DateTime(2025, 4, 14, 4, 20, 11, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2025, 4, 14, 15, 32, 46, 0, DateTimeKind.Utc),
                            Depart = "Berlin",
                            Destination = "Miami",
                            NombrePlacesMax = 400,
                            PlacesDisponibles = 341,
                            Prix = 381.00m
                        },
                        new
                        {
                            Id = 13,
                            DateArrivee = new DateTime(2025, 6, 12, 23, 40, 11, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2025, 6, 13, 0, 46, 40, 0, DateTimeKind.Utc),
                            Depart = "New York",
                            Destination = "London",
                            NombrePlacesMax = 310,
                            PlacesDisponibles = 193,
                            Prix = 138.00m
                        },
                        new
                        {
                            Id = 14,
                            DateArrivee = new DateTime(2025, 9, 17, 23, 35, 11, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2025, 9, 18, 12, 41, 10, 0, DateTimeKind.Utc),
                            Depart = "New York",
                            Destination = "Berlin",
                            NombrePlacesMax = 250,
                            PlacesDisponibles = 225,
                            Prix = 81.00m
                        },
                        new
                        {
                            Id = 15,
                            DateArrivee = new DateTime(2025, 4, 2, 14, 15, 11, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2025, 4, 3, 1, 36, 34, 0, DateTimeKind.Utc),
                            Depart = "Dubai",
                            Destination = "Tokyo",
                            NombrePlacesMax = 300,
                            PlacesDisponibles = 245,
                            Prix = 302.00m
                        },
                        new
                        {
                            Id = 16,
                            DateArrivee = new DateTime(2025, 4, 12, 12, 20, 11, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2025, 4, 12, 15, 15, 18, 0, DateTimeKind.Utc),
                            Depart = "Vancouver",
                            Destination = "Sydney",
                            NombrePlacesMax = 230,
                            PlacesDisponibles = 145,
                            Prix = 524.00m
                        },
                        new
                        {
                            Id = 17,
                            DateArrivee = new DateTime(2025, 8, 30, 16, 55, 11, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2025, 8, 30, 18, 36, 54, 0, DateTimeKind.Utc),
                            Depart = "Tokyo",
                            Destination = "Toronto",
                            NombrePlacesMax = 350,
                            PlacesDisponibles = 232,
                            Prix = 231.00m
                        },
                        new
                        {
                            Id = 18,
                            DateArrivee = new DateTime(2025, 5, 26, 22, 45, 11, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2025, 5, 27, 9, 41, 28, 0, DateTimeKind.Utc),
                            Depart = "Shanghai",
                            Destination = "Singapore",
                            NombrePlacesMax = 150,
                            PlacesDisponibles = 148,
                            Prix = 577.00m
                        },
                        new
                        {
                            Id = 19,
                            DateArrivee = new DateTime(2025, 6, 17, 23, 0, 11, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2025, 6, 18, 2, 39, 57, 0, DateTimeKind.Utc),
                            Depart = "Buenos Aires",
                            Destination = "Rome",
                            NombrePlacesMax = 180,
                            PlacesDisponibles = 117,
                            Prix = 595.00m
                        },
                        new
                        {
                            Id = 20,
                            DateArrivee = new DateTime(2025, 8, 25, 2, 35, 11, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2025, 8, 25, 9, 30, 43, 0, DateTimeKind.Utc),
                            Depart = "Rome",
                            Destination = "Madrid",
                            NombrePlacesMax = 220,
                            PlacesDisponibles = 169,
                            Prix = 454.00m
                        },
                        new
                        {
                            Id = 120,
                            DateArrivee = new DateTime(2025, 3, 30, 3, 50, 11, 0, DateTimeKind.Utc),
                            DateDepart = new DateTime(2025, 3, 30, 15, 3, 37, 0, DateTimeKind.Utc),
                            Depart = "São Paulo",
                            Destination = "Toronto",
                            NombrePlacesMax = 350,
                            PlacesDisponibles = 350,
                            Prix = 504.00m
                        });
                });

            modelBuilder.Entity("VolApp.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("AnneeRecrutement")
                        .HasColumnType("int");

                    b.Property<string>("CIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VolApp.Models.Booking", b =>
                {
                    b.HasOne("VolApp.Models.ApplicationUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolApp.Models.Vol", "Vol")
                        .WithMany()
                        .HasForeignKey("VolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vol");
                });

            modelBuilder.Entity("VolApp.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
